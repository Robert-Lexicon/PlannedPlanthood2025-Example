/**** Theme ****/
@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap");

:root {
    --clr-neutral-100: hsl(0, 0%, 100%);
    --clr-neutral-200: hsl(0, 0%, 87%);
    --clr-neutral-300: hsl(0, 0%, 57%);
    --clr-neutral-400: hsl(0, 0%, 27%);
    --clr-neutral-500: hsl(0, 0%, 25%);
    --clr-neutral-600: hsl(0, 0%, 22%);
    --clr-neutral-700: hsl(0, 0%, 20%);
    --clr-neutral-800: hsl(0, 0%, 17%);

    --clr-neutral-900: hsl(0, 0%, 12%);

    --clr-lilac-100: hsl(300, 54%, 97%);
    --clr-brown-400: hsl(20, 21%, 28%);
    --clr-brown-800: hsl(23, 32%, 23%);

    --clr-red-400: hsl(346, 54%, 47%);
    --clr-red-800: hsl(354, 55%, 32%);

    --clr-green-100: hsl(169, 11%, 93%);
    --clr-green-200: hsl(169, 51%, 58%);
    --clr-green-400: hsl(169, 86%, 28%);
    --clr-green-800: hsl(169, 86%, 12%);
    --clr-green-900: hsl(169, 80%, 12%);

    --clr-robust: hsl(221, 63%, 32%);
    --clr-green: hsl(110, 63%, 32%);
    --clr-flower: hsl(2, 92%, 33%);
    --clr-colorful: hsl(303, 55%, 47%);
    --clr-sunloving: hsl(27, 88%, 33%);
    --clr-air: hsl(180, 84%, 27%);
    --clr-decorative: hsl(278, 79%, 40%);
    --clr-edible: hsl(68, 61%, 30%);
    --clr-easy: hsl(224, 86%, 58%);
    --clr-fragrant: hsl(327, 51%, 47%);
    --clr-fast: hsl(218, 11%, 34%);

    --border-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);

    --font-base: "Open Sans", "Segoe UI", Tahoma, sans-serif;

    --fw-400: 400;
    --fw-500: 500;
    --fw-600: 600;
    --fw-700: 700;
    --fw-800: 800;
    --fw-900: 900;

    --fs-100: 0.625rem;
    --fs-200: 0.75rem;
    --fs-400: 1rem;
    --fs-500: 1.25rem;
    --fs-600: 1.5rem;
    --fs-700: 2rem;
    --fs-800: 2.5rem;
    --fs-900: 3rem;

    --clr-accent: var(--clr-green-400);
    --clr-accent-light-1: var(--clr-green-100);

    --clr-primary-light-1: var(--clr-neutral-100);
    --clr-primary-light-2: var(--clr-neutral-200);
    --clr-primary-light-3: var(--clr-neutral-300);
    --clr-primary: var(--clr-neutral-400);
    --clr-primary-dark: var(--clr-neutral-800);

    --fw-regular: var(--fw-400);
    --fw-medium: var(--fw-500);
    --fw-semi-bold: var(--fw-600);
    --fw-bold: var(--fw-700);
    --fw-x-bold: var(--fw-900);

    --spacing-xl: 4rem;
    --spacing-lg: 3rem;
    --spacing-md: 1rem;
    --spacing-sm: .5rem;
    --spacing-xs: .25rem;

    --content-max-width: 900px;
    --breakout-max-width: 1200px;
}



/**** Global/base ****/
body {
    font-family: var(--font-base);
    background-color: var(--clr-accent-light-1);
    color: var(--clr-primary-dark);
}

h2,
h3 {
    font-weight: var(--fw-bold);
    line-height: 1;
}

h2 {
    font-size: var(--fs-700);
}

h3 {
    font-size: var(--fs-600);
    font-weight: var(--fw-semi-bold);
}

a {
    color: var(--clr-accent);
    text-decoration: none;

    &:hover,
    &:focus-visible {
        text-decoration: underline;
    }
}

nav {
    display: none;
}


/* not recommended to do this usually, but in this case all images are restricted by their containers anyway */
img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}



/**** || Composition ****/

/* breakout */
/* see https://www.youtube.com/watch?v=c13gpBrnGEw */
.content-grid {
    --padding-inline: var(--spacing-md);
    --breakout-size: calc((var(--breakout-max-width) - var(--content-max-width)) / 2);

    display: grid;
    grid-template-columns:
        [full-width-start] minmax(var(--padding-inline), 1fr) [breakout-start] minmax(0, var(--breakout-size)) [content-start] min(100% - (var(--padding-inline) * 2),
            var(--content-max-width)) [content-end] minmax(0, var(--breakout-size)) [breakout-end] minmax(var(--padding-inline), 1fr) [full-width-end];
}

.content-grid> :not(.breakout, .full-width),
.full-width> :not(.breakout, .full-width) {
    grid-column: content;
}

.content-grid>.breakout {
    grid-column: breakout;
}

.content-grid>.full-width {
    grid-column: full-width;

    display: grid;
    grid-template-columns: inherit;
}

/* flow classes for spacing */
.flow>*+* {
    margin-block-start: var(--flow-space, var(--spacing-md));
}

.flow-xl>*+* {
    margin-block-start: var(--flow-space-xl, var(--spacing-xl));
}


/* just center whatever content */
.center-content {
    text-align: center;

    >* {
        margin-inline: auto;
    }
}

/* flex flow style for things like badges */
.cluster {
    display: flex;
    flex-wrap: wrap;
    gap: var(--cluster-gap, var(--spacing-xs));
    align-content: var(--cluster-align, flex-start);
    justify-content: var(--cluster-justify, flex-start);
}

.flex-center {
    display: flex;
    justify-content: center;
    align-items: center;
}

/* these might just as well be utility classes but does do layout so I keep them here */
.flex {
    display: flex;
}

.grid {
    display: grid;
}

.justify-between {
    justify-content: space-between;
}

.gap-md {
    gap: var(--spacing-md);
}

.container {
    container-type: inline-size;
}


/**** || Utilities ****/

.visually-hidden {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
}

.aspect-square {
    aspect-ratio: 1;
}

.border-dark {
    border: var(--_border-size, 1px) solid var(--clr-primary-dark);
}

.break-word span {
    display: table;
}

.uppercase {
    text-transform: uppercase;
}

.p-sm {
    padding: var(--spacing-sm);
}

.py-sm {
    padding-block: var(--spacing-sm);
}

.py-lg {
    padding-block: var(--spacing-lg);
}

.py-xl {
    padding-block: var(--spacing-xl);
}

.rounded {
    border-radius: 100vw;
}


/**** || Blocks ****/
/* Badges */
.badge {
    --_clr-badge: var(--clr-accent);

    display: block;
    color: var(--clr-primary-light-1);
    background-color: var(--_clr-badge);
    padding: 0.5em 1em;
    border-radius: 100vw;
    text-transform: uppercase;
    font-size: var(--fs-100);
    font-weight: var(--fw-bold);

    &[data-variant="robust"] {
        --_clr-badge: var(--clr-robust);
    }

    &[data-variant="green"] {
        --_clr-badge: var(--clr-green);
    }

    &[data-variant="flower"] {
        --_clr-badge: var(--clr-flower);
    }

    &[data-variant="colorful"] {
        --_clr-badge: var(--clr-colorful);
    }

    &[data-variant="sunloving"] {
        --_clr-badge: var(--clr-sunloving);
    }

    &[data-variant="air"] {
        --_clr-badge: var(--clr-air);
    }

    &[data-variant="decorative"] {
        --_clr-badge: var(--clr-decorative);
    }

    &[data-variant="edible"] {
        --_clr-badge: var(--clr-edible);
    }

    &[data-variant="easy"] {
        --_clr-badge: var(--clr-easy);
    }

    &[data-variant="fragrant"] {
        --_clr-badge: var(--clr-fragrant);
    }

    &[data-variant="fast"] {
        --_clr-badge: var(--clr-fast);
    }
}



/* Buttons */
.button,
input[type="submit"] {
    display: inline-block;
    border: none;
    padding-block: var(--spacing-sm);
    padding-inline: 1rem;
    border-radius: 100vw;
    cursor: pointer;

    background-color: var(--clr-accent);
    color: var(--clr-primary-light-1);

    /* for svg icons */
    fill: var(--clr-primary-light-1);

    &:hover,
    &:focus-visible {
        text-decoration: none;

        outline: 1px solid var(--clr-accent);

        background-color: var(--clr-primary-light-1);
        color: var(--clr-accent);
        fill: var(--clr-accent);
    }

    &[data-variant="faded"] {
        color: var(--clr-primary-light-1);
        background-color: var(--clr-primary-light-3);

        &:hover,
        &:focus-visible {
            background-color: var(--clr-accent);
            color: var(--clr-primary-light-1);
        }
    }

    &[data-variant="ghost"] {
        border-radius: 0;
        color: var(--clr-accent);
        fill: var(--clr-accent);
        background-color: transparent;

        &:hover,
        &:focus-visible {
            background-color: var(--clr-accent);
            color: var(--clr-primary-light-1);
            fill: var(--clr-primary-light-1);

        }
    }
}


.card-list {
    display: grid;
    gap: var(--spacing-md);

    grid-template-columns: repeat(auto-fit, minmax(20ch, 1fr));

}

/* Card */
.card {
    display: grid;
    gap: var(--spacing-md);

    padding: var(--spacing-md);
    background-color: var(--clr-primary-light-1);
    box-shadow: var(--border-shadow);

    grid-template-areas: "photo" "tags" "header" "body" "footer";

    >img {
        grid-area: photo;
    }

    .watermark {
        grid-area: photo;

        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0.3;

        img {
            height: 50%;
            width: auto;
        }
    }

    .tags {
        grid-area: tags;
    }

    footer {
        display: grid;
        grid-template-columns: 3rem 1fr;
        align-items: center;
        align-content: end;
        gap: var(--spacing-sm);

        font-size: var(--fs-200);
    }

    /* this could be nested in footer, but this way it's easier to override if needed */
    .meta {
        .user {
            color: var(--clr-primary);
            font-weight: var(--fw-bold);
        }

        time {
            display: block;
        }
    }
}

.dot {
    display: flex;
    justify-content: center;
    align-items: center;

    background-color: var(--clr-accent);
    border-radius: 100vw;
    height: 100%;
    aspect-ratio: 1;


    svg,
    img {
        stroke: var(--clr-primary-light-1);
        fill: var(--clr-primary-light-1);
        height: 50%;
        width: 50%;
    }
}

.gallery {
    grid-template-columns: repeat(2, 1fr);
    border: 1rem solid var(--clr-primary-light-1);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);

    @container (600px < width <=800px) {
        grid-template-columns: repeat(3, 1fr);
    }

    @container (width > 800px) {
        grid-template-columns: repeat(6, 1fr);

        :first-child {
            grid-column: span 2;
            grid-row: span 2;
        }

        :nth-last-child(-n + 3) {
            grid-column: span 2;
        }
    }
}

.hero {
    background-color: var(--clr-primary-light-1);

    >.layout {
        display: grid;
        gap: var(--spacing-md);
        justify-items: center;
        align-items: center;

        grid-template-rows: min(30ch, 55ch) 1fr;
    }

    .hero__content {
        display: grid;
        justify-items: center;
        gap: var(--spacing-md);


        text-align: center;

        h2 {
            max-width: 20ch;
        }
    }

    .hero__content-right {
        justify-self: right;
    }

    @container (width > 700px) {
        >.layout {
            justify-items: unset;
            gap: var(--spacing-xl);
            grid-template-rows: unset;

            /* I don't like to set this specific sizes here since it could vary by content, so be set more dynamically. But for now... */
            grid-template-columns: 25ch minmax(40ch, 55ch);

            margin-inline: auto;
        }

        .hero__content {
            justify-items: start;
            text-align: unset;
        }

        &[data-type="reverse"] {
            >.layout {
                /* I don't like to set this specific sizes here since it could vary by content, so be set more dynamically. But for now... */
                grid-template-columns: minmax(30ch, 40ch) 25ch;

                .hero__content {
                    order: -1;
                }
            }


        }
    }
}

.form-newsletter {
    display: flex;
    border-radius: 100vw;
    border: 1px solid var(--clr-primary);
    padding: 0.15rem;

    input:not(.button) {
        background-color: var(--clr-primary-light-1);
        flex-grow: 1;
        padding-block: var(--spacing-sm);
        padding-inline: 1rem;
        border-radius: inherit;
        border: none;
        text-align: center;
    }
}

.logo {
    display: flex;
    gap: var(--spacing-sm);
    align-items: center;

    &:hover,
    &:focus-visible {
        text-decoration: none;
    }

    h1,
    h2 {
        font-size: inherit;
        line-height: 0.8;
        font-size: var(--fs-500);
        font-weight: var(--fw-medium);
        text-transform: uppercase;
    }

    img,
    svg {
        stroke: var(--_clr-stroke, var(--clr-accent));
        height: 2.5rem;
        stroke-width: 12;
        max-width: fit-content;
    }
}

.nav-main ul {
    display: flex;
    gap: var(--spacing-md);

    font-weight: var(--fw-medium);
    text-transform: uppercase;

    li a {
        display: block;
        padding-block: var(--spacing-md);
        padding-inline: var(--spacing-lg);


        &:hover,
        &:focus-visible {
            text-decoration: none;
            color: var(--clr-primary-light-1);
            background-color: var(--clr-accent);
        }
    }

}

.page__header {
    background-color: var(--clr-primary-light-1);
}

.page__footer {
    p {
        max-width: 50ch;
    }

    .contact {
        .contact__icon {
            display: inline;
            height: 1.625ex;
            width: auto;
            padding-inline-end: var(--spacing-xs)
        }
    }
}



/**** || Exceptions ****/
[data-variant="inverted"] {
    background-color: var(--clr-accent);
    color: var(--clr-accent-light-1);

    --_clr-stroke: var(--clr-accent-light-1);

    a {
        color: inherit;
    }
}


@media (prefers-color-scheme: dark) {
    :root {
        --clr-accent: var(--clr-green-100);
        --clr-accent-light-1: var(--clr-green-400);

        --clr-primary-light-1: var(--clr-neutral-900);
        --clr-primary-light-2: var(--clr-neutral-800);
        --clr-primary-light-3: var(--clr-neutral-200);
        --clr-primary: var(--clr-neutral-200);
        --clr-primary-dark: var(--clr-neutral-100);
    }

    .page__footer {
        background-color: var(--clr-primary-light-1);
        color: var(--clr-accent);
    }

    [data-variant="inverted"] .logo {
        svg {
            stroke: var(--clr-accent);
        }
    }

    .badge {
        --_clr-badge: var(--clr-accent-light-1);
        color: var(--clr-primary-dark-1);
    }
}

@media (width > 800px) {
    nav {
        display: block;
    }

    #menu_toggle_mobile {
        display: none;
    }
}